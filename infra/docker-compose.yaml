services:
  traefik:
    image: traefik:v2.10
    command:
      - --api.insecure=true
      - --providers.docker=true
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro

  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: lux
      POSTGRES_PASSWORD: luxpass
      POSTGRES_DB: erp
      LANG: en_US.UTF-8
      LC_ALL: en_US.UTF-8
      PGCLIENTENCODING: UTF8
    ports: ["5432:5432"]
    volumes: [db:/var/lib/postgresql/data]

  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@lux.local
      PGADMIN_DEFAULT_PASSWORD: admin
    ports: ["5050:80"]

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_ZOOKEEPER_CONNECT: ''
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'PLAINTEXT'
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@localhost:9092'
    ports: ["9092:9092"]

  rabbitmq:
    image: rabbitmq:3-management
    ports: ["5672:5672","15672:15672"]

  mailhog:
    image: mailhog/mailhog
    ports: ["8025:8025"]

  prometheus:
    image: prom/prometheus
    ports: ["9090:9090"]
    volumes:
      - ./infra/prometheus:/etc/prometheus

  grafana:
    image: grafana/grafana
    ports: ["3000:3000"]

  loki:
    image: grafana/loki:2.8.2
    ports: ["3100:3100"]

  gateway:
    build: ../gateway
    env_file: ../.env.sample
    depends_on: [postgres, kafka]
    ports: ["8000:8000"]
    healthcheck:
      test: ["CMD-SHELL","curl -f http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.gateway.rule=Host(`localhost`) && PathPrefix(`/` )"
      - "traefik.http.services.gateway.loadbalancer.server.port=8000"

  ms-inventario:
    build: ../ms-inventario
    env_file: ../.env.sample
    depends_on: [postgres]
    environment:
      DATABASE_URL: "postgresql+psycopg2://lux:luxpass@postgres:5432/erp"
    ports:
      - "8002:8000"
    healthcheck:
      test: ["CMD-SHELL","curl -f http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5


  ms-logistica:
    build: ../ms-logistica
    env_file: ../.env.sample
    depends_on: [postgres, kafka]
    ports: ["8001:8000"]
    healthcheck:
      test: ["CMD-SHELL","curl -f http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  ms-seguridad:
    build: ../ms-seguridad
    env_file: ../.env.sample
    depends_on: [postgres, kafka]

  ms-activos:
    build: ../ms-activos
    env_file: ../.env.sample
    depends_on: [postgres, kafka]

  ms-rrhh:
    build: ../ms-rrhh
    env_file: ../.env.sample
    depends_on: [postgres, kafka]

  ms-reportes:
    build: ../ms-reportes
    env_file: ../.env.sample
    depends_on: [postgres, kafka]

  web:
    build: ../web
    env_file: ../web/.env
    environment:
      # Permite sobreescribir desde entorno host si se desea
      VITE_API_URL: ${VITE_API_URL:-http://localhost:8000}
      VITE_API_INVENTARIO: ${VITE_API_INVENTARIO:-http://localhost:8002}
      VITE_GOOGLE_MAPS_API_KEY: ${VITE_GOOGLE_MAPS_API_KEY}
    ports: ["5173:80"]
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.web.rule=Host(`localhost`) && PathPrefix(`/` )"
      - "traefik.http.services.web.loadbalancer.server.port=5173"
    depends_on: [gateway]

volumes:
  db:
